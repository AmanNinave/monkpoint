// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with extended profile information
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  timezone  String   @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  habits        Habit[]
  habitEntries  HabitEntry[]
  streaks       Streak[]
  goals         Goal[]
  moods         Mood[]
  achievements  UserAchievement[]
  friends       Friendship[] @relation("UserFriends")
  friendOf      Friendship[] @relation("FriendOf")
  notifications Notification[]
  settings      UserSettings?

  @@map("users")
}

// Habit categories for organization
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  habits Habit[]

  @@map("categories")
}

// Individual habits that users can track
model Habit {
  id          String   @id @default(cuid())
  userId      String
  categoryId  String?
  name        String
  description String?
  icon        String?
  color       String?
  frequency   HabitFrequency @default(DAILY)
  targetValue Int? // For quantitative habits (e.g., 8 glasses of water)
  unit        String? // Unit of measurement (e.g., "glasses", "minutes", "pages")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  entries    HabitEntry[]
  streaks    Streak[]

  @@map("habits")
}

// Daily habit entries/completions
model HabitEntry {
  id        String   @id @default(cuid())
  userId    String
  habitId   String
  date      DateTime @db.Date
  value     Float? // For quantitative habits
  notes     String?
  mood      Int? // 1-5 scale for mood associated with this entry
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([userId, habitId, date])
  @@map("habit_entries")
}

// Streak tracking for habits
model Streak {
  id          String   @id @default(cuid())
  userId      String
  habitId     String
  current     Int      @default(0)
  longest     Int      @default(0)
  lastDate    DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([userId, habitId])
  @@map("streaks")
}

// User goals and milestones
model Goal {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  targetValue Float?
  currentValue Float     @default(0)
  unit        String?
  deadline    DateTime?
  status      GoalStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

// Daily mood tracking
model Mood {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @db.Date
  rating    Int // 1-10 scale
  notes     String?
  tags      String[] // Array of mood tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("moods")
}

// Achievement system
model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String?
  category    String
  criteria    Json // Flexible criteria for unlocking
  points      Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

// User achievements
model UserAchievement {
  id            String     @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime   @default(now())
  isViewed      Boolean    @default(false)

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Social features - friend connections
model Friendship {
  id        String           @id @default(cuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

// User settings and preferences
model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  notifications         Boolean @default(true)
  reminderTime          String? // Time for daily reminders
  weekStart             Int     @default(1) // 0 = Sunday, 1 = Monday
  theme                 String  @default("light")
  language              String  @default("en")
  shareProgress         Boolean @default(false)
  aiSuggestions         Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Notification system
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional data for the notification
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum HabitFrequency {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum NotificationType {
  REMINDER
  ACHIEVEMENT
  STREAK
  FRIEND_REQUEST
  FRIEND_ACTIVITY
  GOAL_MILESTONE
}
